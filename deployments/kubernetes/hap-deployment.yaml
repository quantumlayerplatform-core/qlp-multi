apiVersion: v1
kind: ConfigMap
metadata:
  name: hap-config
  namespace: qlp-production
data:
  HAP_ENABLED: "true"
  HAP_LOG_VIOLATIONS: "true"
  HAP_BLOCK_SEVERITY: "HIGH"
  HAP_CACHE_TTL: "3600"
  HAP_VIOLATION_CACHE_TTL: "300"
  HAP_MAX_CACHE_SIZE: "10000"
  HAP_BATCH_SIZE: "100"
  HAP_TIMEOUT_MS: "500"
  HAP_ML_ENABLED: "false"
  HAP_LLM_CHECKS: "false"
  HAP_METRICS_ENABLED: "true"
  HAP_RATE_LIMIT_ENABLED: "true"
  HAP_RATE_LIMIT_PER_USER: "1000"
  HAP_COMPLIANCE_MODE: "standard"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qlp-orchestrator-hap
  namespace: qlp-production
  labels:
    app: qlp-orchestrator
    version: v2.1.0-hap
spec:
  replicas: 3
  selector:
    matchLabels:
      app: qlp-orchestrator
  template:
    metadata:
      labels:
        app: qlp-orchestrator
        version: v2.1.0-hap
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: orchestrator
        image: your-registry/qlp-platform:v2.1.0-hap
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: hap-config
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: qlp-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: qlp-secrets
              key: redis-url
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: qlp-secrets
              key: openai-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: qlp-secrets
              key: anthropic-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: migrations
          mountPath: /migrations
          readOnly: true
      volumes:
      - name: migrations
        configMap:
          name: hap-migrations

---
apiVersion: v1
kind: Service
metadata:
  name: qlp-orchestrator
  namespace: qlp-production
spec:
  selector:
    app: qlp-orchestrator
  ports:
  - port: 80
    targetPort: 8000
    name: http
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: qlp-orchestrator-hpa
  namespace: qlp-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: qlp-orchestrator-hap
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hap-migrations
  namespace: qlp-production
data:
  004_create_hap_tables_fixed.sql: |
    -- HAP (Hate, Abuse, Profanity) Detection Tables
    -- Migration: 004_create_hap_tables_fixed.sql
    
    -- Table for logging violations
    CREATE TABLE IF NOT EXISTS hap_violations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        tenant_id VARCHAR(255) NOT NULL,
        user_id VARCHAR(255),
        context VARCHAR(50) NOT NULL,
        severity VARCHAR(20) NOT NULL,
        categories TEXT[],
        confidence DECIMAL(3, 2),
        content_hash VARCHAR(64),
        explanation TEXT,
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Create indexes for hap_violations
    CREATE INDEX IF NOT EXISTS idx_hap_tenant_user ON hap_violations (tenant_id, user_id);
    CREATE INDEX IF NOT EXISTS idx_hap_severity ON hap_violations (severity);
    CREATE INDEX IF NOT EXISTS idx_hap_created ON hap_violations (created_at DESC);
    CREATE INDEX IF NOT EXISTS idx_hap_categories ON hap_violations USING GIN (categories);
    
    -- Additional tables omitted for brevity...

---
apiVersion: batch/v1
kind: Job
metadata:
  name: hap-migration-job
  namespace: qlp-production
spec:
  template:
    spec:
      containers:
      - name: migrate
        image: postgres:15
        command: 
        - /bin/bash
        - -c
        - |
          psql $DATABASE_URL -f /migrations/004_create_hap_tables_fixed.sql
          echo "HAP migration completed"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: qlp-secrets
              key: database-url
        volumeMounts:
        - name: migrations
          mountPath: /migrations
      volumes:
      - name: migrations
        configMap:
          name: hap-migrations
      restartPolicy: OnFailure

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: hap-metrics
  namespace: qlp-production
spec:
  selector:
    matchLabels:
      app: qlp-orchestrator
  endpoints:
  - port: http
    path: /metrics
    interval: 30s