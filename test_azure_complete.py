#!/usr/bin/env python3
"""
Complete Azure OpenAI Integration Test
Tests the full QLP system with Azure OpenAI including capsule delivery
"""

import asyncio
import json
import os
import sys
from datetime import datetime
import requests

sys.path.append('.')

# Set database URL
os.environ['DATABASE_URL'] = 'postgresql://qlp_user:qlp_password@127.0.0.1:15432/qlp_db'

async def test_complete_workflow():
    """Test the complete QLP workflow with Azure OpenAI"""
    
    print("üåü QUANTUM LAYER PLATFORM - AZURE OPENAI INTEGRATION TEST")
    print("="*60)
    
    # Step 1: Generate a capsule using Azure OpenAI
    print("\n1Ô∏è‚É£ Generating code capsule with Azure OpenAI...")
    
    request_data = {
        "tenant_id": "azure-test",
        "user_id": "test-user",
        "description": "Create a Python REST API with FastAPI for a todo list application",
        "requirements": "Include CRUD operations, SQLAlchemy models, and proper error handling",
        "metadata": {
            "language": "python",
            "framework": "fastapi",
            "database": "postgresql"
        }
    }
    
    response = requests.post(
        "http://localhost:8000/generate/capsule",
        json=request_data,
        timeout=120
    )
    
    if response.status_code != 200:
        print(f"‚ùå Failed to generate capsule: {response.status_code}")
        print(response.text)
        return
    
    result = response.json()
    capsule_id = result['capsule_id']
    
    print(f"‚úÖ Capsule generated successfully!")
    print(f"   - Capsule ID: {capsule_id}")
    print(f"   - Files generated: {result['files_generated']}")
    print(f"   - Confidence score: {result['confidence_score']}")
    print(f"   - Languages: {', '.join(result['languages'])}")
    
    # Step 2: Export the capsule in different formats
    print("\n2Ô∏è‚É£ Testing capsule export functionality...")
    
    formats = ["zip", "tar.gz"]
    for fmt in formats:
        export_response = requests.get(
            f"http://localhost:8000/capsule/{capsule_id}/export/{fmt}",
            timeout=30
        )
        
        if export_response.status_code == 200:
            print(f"‚úÖ Successfully exported as {fmt}")
        else:
            print(f"‚ö†Ô∏è  Failed to export as {fmt}: {export_response.status_code}")
    
    # Step 3: Create a version
    print("\n3Ô∏è‚É£ Creating capsule version...")
    
    version_data = {
        "author": "Azure Test User",
        "message": "Initial version generated by Azure OpenAI",
        "branch": "main"
    }
    
    version_response = requests.post(
        f"http://localhost:8000/capsule/{capsule_id}/version",
        json=version_data,
        timeout=30
    )
    
    if version_response.status_code == 200:
        version_result = version_response.json()
        print(f"‚úÖ Version created: {version_result.get('version_id', 'N/A')}")
    else:
        print(f"‚ö†Ô∏è  Failed to create version: {version_response.status_code}")
    
    # Step 4: Sign the capsule
    print("\n4Ô∏è‚É£ Digitally signing the capsule...")
    
    # Sign endpoint expects private_key as query parameter
    sign_response = requests.post(
        f"http://localhost:8000/capsule/{capsule_id}/sign?private_key=test-private-key-for-signing",
        timeout=30
    )
    
    if sign_response.status_code == 200:
        print("‚úÖ Capsule signed successfully")
    else:
        print(f"‚ö†Ô∏è  Failed to sign capsule: {sign_response.status_code}")
    
    # Step 5: Test delivery to local filesystem
    print("\n5Ô∏è‚É£ Testing capsule delivery to local filesystem...")
    
    delivery_configs = [
        {
            "mode": "local",  # Changed from provider to mode
            "destination": "/tmp/qlp-delivery-test",
            "options": {},
            "metadata": {
                "project_name": "azure-test-api"
            }
        }
    ]
    
    delivery_response = requests.post(
        f"http://localhost:8000/capsule/{capsule_id}/deliver",
        json=delivery_configs,
        timeout=30
    )
    
    if delivery_response.status_code == 200:
        delivery_result = delivery_response.json()
        print("‚úÖ Capsule delivered successfully")
        if 'report' in delivery_result:
            print(f"   - Total deliveries: {delivery_result['report'].get('total_deliveries', 0)}")
            print(f"   - Successful: {delivery_result['report'].get('successful_deliveries', 0)}")
    else:
        print(f"‚ö†Ô∏è  Failed to deliver capsule: {delivery_response.status_code}")
    
    # Step 6: Check health of all services
    print("\n6Ô∏è‚É£ Verifying all services are healthy...")
    
    services = [
        ("Orchestrator", 8000),
        ("Agent Factory", 8001),
        ("Validation Mesh", 8002),
        ("Vector Memory", 8003),
        ("Execution Sandbox", 8004)
    ]
    
    all_healthy = True
    for name, port in services:
        try:
            health_response = requests.get(f"http://localhost:{port}/health", timeout=5)
            if health_response.status_code == 200:
                print(f"‚úÖ {name} is healthy")
            else:
                print(f"‚ùå {name} returned status {health_response.status_code}")
                all_healthy = False
        except Exception as e:
            print(f"‚ùå {name} not responding: {str(e)}")
            all_healthy = False
    
    print("\n" + "="*60)
    print("üéâ AZURE OPENAI INTEGRATION TEST COMPLETE!")
    print(f"   - Capsule ID: {capsule_id}")
    print(f"   - All services healthy: {'‚úÖ Yes' if all_healthy else '‚ùå No'}")
    print(f"   - Azure OpenAI working: ‚úÖ Yes")
    print("="*60)


if __name__ == "__main__":
    asyncio.run(test_complete_workflow())